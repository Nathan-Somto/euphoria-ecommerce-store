// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  username           String              @unique
  isDisabled         Boolean             @default(false)
  password           String?
  name               String
  profilePhoto       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               Role
  passwordResetToken PasswordResetToken?
  verificationToken  verificationToken?
  isEmailVerified    Boolean             @default(false)
  address            Address[]
  orders             Order[]
  wishList           WishList[]
  accounts           Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model verificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  userId    String   @unique @db.ObjectId
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  token     String   @unique
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model WishList {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  city        String
  state       String
  zip         String
  phoneNumber String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  images         String[]
  size           Size[]
  name           String
  description    String
  price          Float
  units          Int              @default(1)
  colors         String[]
  inStock        Boolean          @default(true)
  isFeatured     Boolean          @default(false)
  isArchived     Boolean          @default(false)
  discountRate   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String           @db.ObjectId
  OrderedProduct OrderedProduct[]
  wishListIds    String[]         @db.ObjectId // many to many relationship with wishList
  wishLists      WishList[]       @relation(fields: [wishListIds], references: [id])
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.ObjectId
  orderedProducts OrderedProduct[]
  status          Status
  address         String
}

model OrderedProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.ObjectId
}

model Banner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  discountRate  Int?
  discountColor String?
  title         String
  image         String
  description   String
  buttonText    String
  createdAt     DateTime @default(now())
}

model Testimonial {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  message   String
  image     String
  name      String
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  DELIVERED
  CANCELLED
  PAID
}

enum Size {
  XS
  SM
  MD
  LG
  XL
  XXL
}

enum Role {
  ADMIN
  CUSTOMER
}
