// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid()) @map("_id")
  email              String              @unique
  username           String              @unique
  isDisabled         Boolean             @default(false)
  password           String?
  name               String
  profilePhoto       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               Role
  passwordResetToken PasswordResetToken?
  verificationToken  verificationToken?
  isEmailVerified    Boolean             @default(false)
  address            Address[]
  orders             Order[]
  wishList           WishList[]
}

model Token {
  id                 String               @id @default(uuid()) @map("_id")
  token              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  expiresAt          DateTime
  verificationToken  verificationToken[]
  PasswordResetToken PasswordResetToken[]
}

model verificationToken {
  id      String @id @default(uuid()) @map("_id")
  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

model PasswordResetToken {
  id      String @id @default(uuid()) @map("_id")
  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

model Category {
  id        String    @id @default(uuid()) @map("_id")
  name      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model WishList {
  id         String    @id @default(uuid()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
}

model Address {
  id        String   @id @default(uuid()) @map("_id")
  street    String
  city      String
  state     String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Product {
  id             String           @id @default(uuid()) @map("_id") @db.ObjectId
  images         String[]
  size           Size[]
  name           String
  description    String
  price          Float
  units          Int              @default(1) 
  colors         String[]
  inStock        Boolean          @default(true)
  isFeatured     Boolean          @default(false)
  isArchived     Boolean          @default(false)
  discountRate   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String
  OrderedProduct OrderedProduct[]
  wishListIds    String[]         @db.ObjectId // many to many relationship with wishList
  wishLists      WishList[]       @relation(fields: [wishListIds], references: [id])
}

model Order {
  id              String           @id @default(uuid()) @map("_id")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  orderedProducts OrderedProduct[]
  status          Status
  address         String
}

model OrderedProduct {
  id        String   @id @default(uuid()) @map("_id")
  productId String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Banner {
  id            String   @id @default(uuid()) @map("_id")
  discountRate  Int?
  discountColor String?
  title         String
  description   String
  buttonText    String
  createdAt     DateTime @default(now())
}

model Testimonial {
  id        String   @id @default(uuid()) @map("_id")
  rating    Int
  message   String
  image     String
  name      String
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  DELIVERED
  CANCELLED
  PAID
}

enum Size {
  XS
  SM
  MD
  LG
  XL
  XXL
}

enum Role {
  ADMIN
  CUSTOMER
}
